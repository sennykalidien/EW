"use strict";function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}var APP=APP||{};APP.launcher=function(){function e(){document.addEventListener("DOMContentLoaded",function(){APP.geo.getLocation()})}return{init:e}}(),APP.launcher.init(),APP.data=function(e){function t(e){var t=this;return new Promise(function(o,n){var i=new XMLHttpRequest;i.open("GET",e,!0),i.onload=function(){t.status>=200&&t.status<300?o(i.response):n({status:t.status,statusText:i.statusText})},i.onerror=function(){n({status:t.status,statusText:i.statusText})},i.send()})}function o(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;this.request(r).then(function(t){var o=JSON.parse(t),n=[];o.Objects.forEach(function(e){if(1==e.HeeftVideo){var t={id:e.Id};n.push(t)}}),APP.router.init(n,e)})}function n(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",n="koop",e=e,i="1",a="25",r="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/"+o+"/?type="+n+"&zo=/"+e+"&page="+i+"&pagesize="+a;this.request(r).then(function(e){var t=JSON.parse(e),o=[];[].forEach.call(t.Objects,function(e){var t={id:e.Id,title:e.Adres,photo:e.FotoLargest,postalcode:e.Postcode,place:e.Woonplaats,price:e.Prijs.Koopprijs};o.push(t)}),APP.page.houseFavourites(o)})}function i(e){var t="json",o="e2d60e885b8742d4b0648300e3703bd7",e=e,n="koop",i="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+t+"/detail/"+o+"/"+n+"/"+e+"/";this.request(i).then(function(e){var t,o,n,i=JSON.parse(e),a=[];for(t=0;t<i.Media.length-12;t++)o=i.Media[t],void 0!=o.MediaItems[3]&&(n=o.MediaItems[3].Url),a.push({photo:n});var r=[],s={id:i.InternalId,title:i.Titels[0].Omschrijving,photos:a,description:i.VolledigeOmschrijving,price:i.KoopPrijs,url:i.URL};r.push(s),APP.page.houseDetail(r)})}function a(e,t){var o="json",n="e2d60e885b8742d4b0648300e3703bd7",e=e,i="koop",a="http://funda.kyrandia.nl/feeds/Aanbod.svc/"+o+"/detail/"+n+"/"+i+"/"+e+"/";this.request(a).then(function(o){var n=JSON.parse(o),i=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n+1];return"not found"},a=function(o){var n=0,i=t.length;for(n;i>n;n+=1)if(t[n].id===e)return t[n-1];return"not found"},r=i(e),s=a(e);if(void 0==s)var u={id:e,nextID:r.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else if(void 0==r)var u={id:e,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};else var u={id:e,nextID:r.id,prevID:s.id,title:n.Titels[0].Omschrijving,buyPrice:n.Prijs.Koopprijs,videoURL:n.Video.Videos[0].Cdns[0].Url};APP.page.houseVideo(u)})}return _defineProperty({request:t,getHouses:o,getHouseFavourites:n,getHouseVideo:a,getHouseDetail:i},"getHouseDetail",i)}(),APP.geo=function(){function e(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(t,o,{enableHighAccuracy:!0,maximumAge:0})}function t(e){var t=["https://nominatim.openstreetmap.org/reverse?format=json&lat=","&lon="],o=e.coords.latitude,n=e.coords.longitude,i="&zoom=13&addressdetails=1",a=t[0]+o+t[1]+n+i;APP.data.request(a).then(function(e){var t=JSON.parse(e),o=t.address.city||t.address.town;localStorage.setItem("Location",o),console.log(o),APP.data.getHouses(o)})}function o(){console.log("an error has occured")}return{getLocation:e}}(),APP.page=function(){function e(e){APP.data.request("./dist/templates/house-videos.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}function t(e){APP.data.request("./dist/templates/house-detail.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active")})}function o(e){if(null!=localStorage.getItem("houseID"))var t=localStorage.getItem("houseID");else var t=[];var e=e.filter(function(e){return-1!=t.indexOf(e.id)});console.log(e),APP.data.request("./dist/templates/house-favourites.mst").then(function(t){n.innerHTML=Mustache.render(t,e),i.classList.remove("active"),APP.storage.init()})}var n=document.querySelector("main"),i=document.getElementById("loader");return{houseVideo:e,houseDetail:t,houseFavourites:o}}(),APP.router=function(){function e(e,t){window.location.hash||(window.location="#videoID="+e[0].id),routie({"videoID=:ID":function(t){APP.data.getHouseVideo(t,e)},"houseDetail=:ID":function(e){APP.data.getHouseDetail(e)},favourites:function(){APP.data.getHouseFavourites(t)}})}return{init:e}}(),APP.storage=function(){function e(){function e(e){e.preventDefault();var n=this.getAttribute("value");t.push(n),this.classList.remove("active");for(var i=0;i<o.length;i++){for(var a=o[i],r=0,s=0;s<o.length;s++)o[s]==t[i]&&r++;if(r>1)for(var u=0;u<o.length;u++)o[u]==a&&(o.splice(u,1),u-=1)}[].forEach.call(o,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),localStorage.setItem("houseID",JSON.stringify(o))}if(null===localStorage.getItem("houseID")||""===localStorage.getItem("houseID"))var t=[];else var t=JSON.parse(localStorage.getItem("houseID"));var o=t,n=document.querySelectorAll(".favourite-btn");[].forEach.call(o,function(e){var t=document.querySelector('.favourite-btn[value="'+e+'"]');t&&t.classList.add("active")}),[].forEach.call(n,function(t){t.addEventListener("click",e,!1)})}return{init:e}}();
//# sourceMappingURL=data:application/json;base64,
